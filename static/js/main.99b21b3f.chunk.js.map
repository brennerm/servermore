{"version":3,"sources":["models.tsx","questions.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Question","questionText","answers","this","Answer","answerText","value","hint","questions","ServerMore","props","state","selectedAnswers","selectAnswer","bind","questionIndex","answerIndex","console","log","selectedAnswersCopy","setState","updateValue","newValue","forEach","undefined","Navbar","id","fixed","bg","Brand","href","Collapse","className","Text","Container","map","question","Form","Group","Row","Col","Label","ButtonGroup","toggle","answer","ToggleButton","type","checked","onChange","e","Component","ServerMoreValue","xs","Control","readOnly","max","min","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99b21b3f.chunk.js","sourcesContent":["export class Question {\n  questionText: string;\n  answers: Array<Answer>;\n\n  constructor(questionText: string, answers: Array<Answer>) {\n    this.questionText = questionText\n    this.answers = answers\n  }\n}\n\nexport class Answer {\n  answerText: string;\n  value: number;\n  hint: string;\n\n  constructor(answerText: string, value: number, hint: string) { \n    this.answerText = answerText\n    this.value = value\n    this.hint = hint\n  }\n}","import { Answer } from \"./models\";\nimport { Question } from \"./models\";\n\nexport const questions = [\n    new Question(\n        \"How quick does your application start up?\",\n        [\n            new Answer(\n                \"Slow\",\n                10,\n                \"Slow starting applications aren't a great fit for serverless as you'll experience these delays during each cold start.\"\n            ),\n            new Answer(\n                \"Fast\",\n                -10,\n                \"Fast starting applications result in quick cold starts. üëç\"\n            )\n        ]\n    ),\n    new Question(\n        \"Do you plan to execute long running processes?\",\n        [\n            new Answer(\n                \"Yes\",\n                10,\n                \"Running long term tasks serverless will result in higher costs compared to running on a 24/7 server.\"\n            ),\n            new Answer(\n                \"No\",\n                -10,\n                \"Serverless is great for executing short-term tasks.\"\n            )\n        ]\n    ),\n    new Question(\n        \"How predictable is your workload?\",\n        [\n            new Answer(\n                \"I have a good understand of which load I can expect.\",\n                10,\n                \"If you can plan your required compute capacity beforehand, running on traditional servers will be cheaper.\"\n            ),\n            new Answer(\n                \"I'm regularly encountering unpredictable traffic spikes.\",\n                -10,\n                \"Unpredictable load is where serverless really shines.\"\n            )\n        ]\n    ),\n    new Question(\n        \"Do you have resources to take care of server maintenance yourself?\",\n        [\n            new Answer(\n                \"No\",\n                10,\n                \"Going serverless requires you to do no maintenance of servers whatsoever.\"\n            ),\n            new Answer(\n                \"Yes\",\n                -10,\n                \"If you have the resources, managing your on-premise or cloud servers is definitely a valid option.\"\n            )\n        ]\n    ),\n    new Question(\n        \"Is your runtime/programming language being supported by your serverless provider?\",\n        [\n            new Answer(\n                \"No\",\n                10,\n                \"In this case you may need to rewrite your application.\"\n            ),\n            new Answer(\n                \"Yes\",\n                -10,\n                \"In this case you should be able to run serverless without needing to make too many changes to your application.\"\n            )\n        ]\n    ),\n    new Question(\n        \"How important is independence from your platform provider to you?\",\n        [\n            new Answer(\n                \"Very Important\",\n                10,\n                \"Switching from one serverless provider to another may come with a significant amount of migration work required.\"\n            ),\n            new Answer(\n                \"Kind of Important\",\n                5,\n                \"Switching from one serverless provider to another may come with a significant amount of migration work required.\"\n            ),\n            new Answer(\n                \"Not That Important\",\n                -5,\n                \"Good, just keep in mind that serverless often requires matching your application to the providers needs.\"\n            ),\n            new Answer(\n                \"Not Important at all\",\n                -10,\n                \"Good, just keep in mind that serverless often requires matching your application to the providers needs.\"\n            )\n        ]\n    ),\n    new Question(\n        \"Does your application require GPU compute resources?\",\n        [\n            new Answer(\n                \"Yes\",\n                50,\n                \"Currently there are pretty much no serverless providers with GPU support.\"\n            ),\n            new Answer(\n                \"No\",\n                -5,\n                \"In this case you'll be fine going with serverless.\"\n            )\n        ]\n    )\n]","import React, { Component } from 'react';\nimport { ButtonGroup, Col, Container, Form, Navbar, Row, ToggleButton } from 'react-bootstrap'\nimport { HeartFill } from 'react-bootstrap-icons';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Question } from './models';\nimport { questions } from './questions';\n\ninterface Props { }\ninterface State {\n  value: number,\n  selectedAnswers: Array<number>\n}\n\nexport class ServerMore extends Component<Props, State> {\n  questions: Array<Question>\n\n  constructor(props: Props) {\n    super(props)\n\n    this.questions = questions\n\n    this.state = {\n      value: 0,\n      selectedAnswers: []\n    }\n\n    this.selectAnswer = this.selectAnswer.bind(this)\n  }\n\n  selectAnswer(questionIndex: number, answerIndex: number) {\n    console.log(`select: Question: ${questionIndex}, Answer: ${answerIndex}`)\n    let selectedAnswersCopy = [...this.state.selectedAnswers];\n    selectedAnswersCopy[questionIndex] = answerIndex\n    this.setState({ selectedAnswers: selectedAnswersCopy }, () => {\n      this.updateValue()\n    })\n  }\n\n  updateValue() {\n    let newValue = 0\n\n    this.state.selectedAnswers.forEach((answerIndex, questionIndex) => {\n      console.log(`update: Question: ${questionIndex}, Answer: ${answerIndex}`)\n      if (answerIndex !== undefined) {\n        newValue += questions[questionIndex].answers[answerIndex].value\n      }\n    })\n\n    this.setState({ value: newValue })\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Navbar id=\"header\" fixed=\"top\" bg=\"light\">\n          <Navbar.Brand href=\"/\">Servermore</Navbar.Brand>\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Navbar.Text>\n              Built with <HeartFill className=\"text-danger\"></HeartFill> by <a href=\"https://brennerm.github.io/about.html\">brennerm</a>\n            </Navbar.Text>\n          </Navbar.Collapse>\n        </Navbar>\n        <Container className=\"App\">\n          {this.questions.map((question, questionIndex) => (\n            <Form.Group key={questionIndex}>\n              <Row>\n                <Col>\n                  <Form.Label>{question.questionText}</Form.Label>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <ButtonGroup toggle className=\"flex-wrap\">\n                    {question.answers.map((answer, answerIndex) => (\n                      <ToggleButton\n                        type=\"radio\"\n                        key={`${questionIndex}-${answerIndex}`}\n                        value={answerIndex}\n                        checked={this.state.selectedAnswers[questionIndex] === answerIndex}\n                        onChange={e => this.selectAnswer(questionIndex, answerIndex)}>\n                        {answer.answerText}\n                      </ToggleButton>\n\n                    ))}\n                  </ButtonGroup>\n\n                  {\n                    this.state.selectedAnswers[questionIndex] !== undefined\n                      ? <Row><Col><div className={this.questions[questionIndex].answers[this.state.selectedAnswers[questionIndex]].value > 0 ? \"text-danger\" : \"text-success\"}>\n                        {this.questions[questionIndex].answers[this.state.selectedAnswers[questionIndex]].hint}\n                      </div>\n                      </Col></Row>\n                      : null\n                  }\n\n                </Col>\n              </Row>\n            </Form.Group>\n          ))}\n        </Container>\n        <ServerMoreValue value={this.state.value} />\n      </div>\n    );\n  }\n}\n\ninterface ServerMoreValueProps {\n  value: number\n}\n\ninterface ServerMoreValueState { }\n\nclass ServerMoreValue extends Component<ServerMoreValueProps, ServerMoreValueState> {\n  props: ServerMoreValueProps\n\n  constructor(props: ServerMoreValueProps) {\n    super(props)\n\n    this.props = props\n  }\n\n  render() {\n    return <Navbar id=\"footer\" fixed=\"bottom\" className=\"justify-content-between\">\n        <Col xs=\"3\">\n          <Form.Label>serverless</Form.Label>\n        </Col>\n        <Col xs=\"6\">\n          <Form.Control type=\"range\" value={this.props.value} readOnly max=\"100\" min=\"-100\" />\n        </Col>\n        <Col xs=\"3\">\n          <Form.Label>servermore</Form.Label>\n        </Col>\n    </Navbar>\n  }\n}\n\nexport default ServerMore;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}