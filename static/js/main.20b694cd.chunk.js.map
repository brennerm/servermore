{"version":3,"sources":["models.tsx","questions.tsx","logo.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Question","questionText","answers","this","Math","max","map","answer","abs","value","Answer","answerText","hint","questions","ServerMore","props","sort","first","second","maxAnswerValue","enableDarkMode","userPrefersDarkScheme","window","matchMedia","storedDarkFlag","localStorage","getItem","console","log","matches","undefined","state","selectedAnswers","darkMode","setDarkMode","selectAnswer","bind","questionIndex","answerIndex","selectedAnswersCopy","setState","updateValue","newValue","forEach","document","documentElement","classList","toggle","setItem","String","Navbar","id","fixed","className","Col","xs","Image","src","logo","onClick","href","Container","Row","Card","Body","Text","question","Form","Group","Label","ButtonGroup","ToggleButton","type","variant","checked","onChange","Component","ServerMoreValue","Control","readOnly","min","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.20b694cd.chunk.js","sourcesContent":["export class Question {\n  questionText: string;\n  answers: Array<Answer>;\n\n  constructor(questionText: string, answers: Array<Answer>) {\n    this.questionText = questionText\n    this.answers = answers\n  }\n\n  public get maxAnswerValue(): number {\n    return Math.max(...this.answers.map((answer) => Math.abs(answer.value)), 0)\n  }\n}\n\nexport class Answer {\n  answerText: string;\n  value: number;\n  hint: string;\n\n  constructor(answerText: string, value: number, hint: string) {\n    this.answerText = answerText\n    this.value = value\n    this.hint = hint\n  }\n}","import { Answer } from \"./models\";\nimport { Question } from \"./models\";\n\nexport const questions = [\n    new Question(\n        \"How quickly does your application start up?\",\n        [\n            new Answer(\n                \"Slow\",\n                10,\n                \"Slow starting applications aren't a great fit for serverless as you'll experience these delays during each cold start.\"\n            ),\n            new Answer(\n                \"Fast\",\n                -10,\n                \"Fast starting applications result in quick cold starts. üëç\"\n            )\n        ]\n    ),\n    new Question(\n        \"Do you plan to execute long running processes?\",\n        [\n            new Answer(\n                \"Yes\",\n                20,\n                \"Running long term tasks serverless will result in higher costs compared to running on a 24/7 server.\"\n            ),\n            new Answer(\n                \"No\",\n                -20,\n                \"Serverless is great for executing short-term tasks.\"\n            )\n        ]\n    ),\n    new Question(\n        \"How predictable is your workload?\",\n        [\n            new Answer(\n                \"I have a good understand of which load I can expect.\",\n                10,\n                \"If you can plan your required compute capacity beforehand, running on traditional servers will be cheaper.\"\n            ),\n            new Answer(\n                \"I'm regularly encountering unpredictable traffic spikes.\",\n                -10,\n                \"Unpredictable load is where serverless really shines.\"\n            )\n        ]\n    ),\n    new Question(\n        \"Do you have resources to take care of server maintenance yourself?\",\n        [\n            new Answer(\n                \"No\",\n                10,\n                \"Going serverless requires you to do no maintenance of servers whatsoever.\"\n            ),\n            new Answer(\n                \"Yes\",\n                -10,\n                \"If you have the resources, managing your on-premise or cloud servers is definitely a valid option.\"\n            )\n        ]\n    ),\n    new Question(\n        \"Is your runtime/programming language being supported by your serverless provider?\",\n        [\n            new Answer(\n                \"No\",\n                30,\n                \"In this case you may need to refactor your application.\"\n            ),\n            new Answer(\n                \"Yes\",\n                -5,\n                \"In this case you should be able to run serverless without needing to make too many changes to your application.\"\n            )\n        ]\n    ),\n    new Question(\n        \"How important is independence from your platform provider to you?\",\n        [\n            new Answer(\n                \"Very Important\",\n                10,\n                \"Take into consideration that switching from one serverless provider to another may come with a significant amount of migration work required.\"\n            ),\n            new Answer(\n                \"Kind of Important\",\n                5,\n                \"Take into consideration that switching from one serverless provider to another may come with a significant amount of migration work required.\"\n            ),\n            new Answer(\n                \"Not That Important\",\n                -5,\n                \"Good, just keep in mind that serverless often requires adjusting your application to the providers standards.\"\n            ),\n            new Answer(\n                \"Not Important at all\",\n                -10,\n                \"Good, just keep in mind that serverless often requires adjusting your application to the providers standards.\"\n            )\n        ]\n    ),\n    new Question(\n        \"Does your application require GPU compute resources?\",\n        [\n            new Answer(\n                \"Yes\",\n                50,\n                \"Currently there are pretty much no serverless providers with GPU support.\"\n            ),\n            new Answer(\n                \"No\",\n                -5,\n                \"In this case you'll be fine going with serverless.\"\n            )\n        ]\n    )\n]","export default __webpack_public_path__ + \"static/media/logo.8b626ecb.svg\";","import React, { Component } from 'react';\nimport { ButtonGroup, Card, Col, Container, Form, Navbar, Row, ToggleButton, Image } from 'react-bootstrap'\nimport { HeartFill, Moon, Sun, Hammer } from 'react-bootstrap-icons';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Question } from './models';\nimport { questions } from './questions';\nimport logo from './logo.svg';\n\ninterface Props { }\ninterface State {\n  value: number,\n  selectedAnswers: Array<number>,\n  darkMode: boolean\n}\n\nexport class ServerMore extends Component<Props, State> {\n  questions: Array<Question>\n\n  constructor(props: Props) {\n    super(props)\n\n    this.questions = questions.sort((first, second) => second.maxAnswerValue - first.maxAnswerValue)\n\n    const userPrefersDarkScheme = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    const storedDarkFlag = localStorage.getItem(\"dark-mode\");\n\n    console.log(`User prefer dark color scheme: ${userPrefersDarkScheme.matches}`)\n    console.log(`stored dark mode flag: ${storedDarkFlag}`)\n    let enableDarkMode: boolean\n\n    if (userPrefersDarkScheme.matches && storedDarkFlag === undefined) {\n      enableDarkMode = true\n    } else if (storedDarkFlag === \"true\") {\n      enableDarkMode = true\n    } else {\n      enableDarkMode = false\n    }\n\n    this.state = {\n      value: 0,\n      selectedAnswers: [],\n      darkMode: enableDarkMode\n    }\n\n    this.setDarkMode(enableDarkMode)\n\n    this.selectAnswer = this.selectAnswer.bind(this)\n    this.setDarkMode = this.setDarkMode.bind(this)\n  }\n\n  selectAnswer(questionIndex: number, answerIndex: number) {\n    console.log(`select: Question: ${questionIndex}, Answer: ${answerIndex}`)\n    let selectedAnswersCopy = [...this.state.selectedAnswers];\n    selectedAnswersCopy[questionIndex] = answerIndex\n    this.setState({ selectedAnswers: selectedAnswersCopy }, () => {\n      this.updateValue()\n    })\n  }\n\n  updateValue() {\n    let newValue = 0\n\n    this.state.selectedAnswers.forEach((answerIndex, questionIndex) => {\n      console.log(`update: Question: ${questionIndex}, Answer: ${answerIndex}`)\n      if (answerIndex !== undefined) {\n        newValue += questions[questionIndex].answers[answerIndex].value\n      }\n    })\n\n    this.setState({ value: newValue })\n  }\n\n  setDarkMode(value: boolean) {\n    document.documentElement.classList.toggle(\"dark-mode\", value);\n\n    this.setState({\n      darkMode: value\n    }, () => {\n      localStorage.setItem(\"dark-mode\", String(this.state.darkMode));\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar id=\"header\" fixed=\"top\" className=\"justify-content-between\">\n          <Col xs=\"5\" className=\"text-left\">\n            <Image className=\"App-logo img-responsive\" src={logo}></Image> <strong>ServerMore</strong>\n          </Col>\n          <Col xs=\"1\" onClick={() => this.setDarkMode(!this.state.darkMode)}>\n            <h5>\n              {\n                this.state.darkMode\n                  ? <Sun className=\"text-warning\"></Sun>\n                  : <Moon className=\"text-warning\"></Moon>\n              }\n            </h5>\n          </Col>\n          <Col xs=\"5\" className=\"text-right\">\n            <Hammer className=\"text-secondary\"></Hammer> with <HeartFill className=\"text-danger\"></HeartFill> by <a href=\"https://brennerm.github.io/about.html\">brennerm</a>\n          </Col>\n        </Navbar>\n        <Container className=\"App\">\n          <Row>\n            <Col>\n              <Card className=\"text-center\">\n                <Card.Body>\n                  <Card.Text className=\"lead\">\n                    Serverless or go with regular servers?\n                    <br />\n                    <br />\n                    That's all ServerMore is going to help you with.\n                    Answer as many questions as you want and the slider at the bottom will give you an indication based on your responses.\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n          {this.questions.map((question, questionIndex) => (\n            <Form.Group key={questionIndex}>\n              <Row>\n                <Col>\n                  <Form.Label>{question.questionText}</Form.Label>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <ButtonGroup toggle className=\"flex-wrap\">\n                    {question.answers.map((answer, answerIndex) => (\n                      <ToggleButton\n                        type=\"radio\"\n                        variant=\"primary\"\n                        key={`${questionIndex}-${answerIndex}`}\n                        value={answerIndex}\n                        checked={this.state.selectedAnswers[questionIndex] === answerIndex}\n                        onChange={() => this.selectAnswer(questionIndex, answerIndex)}>\n                        {answer.answerText}\n                      </ToggleButton>\n\n                    ))}\n                  </ButtonGroup>\n\n                  {\n                    this.state.selectedAnswers[questionIndex] !== undefined\n                      ? <Row><Col><div className={this.questions[questionIndex].answers[this.state.selectedAnswers[questionIndex]].value > 0 ? \"text-danger\" : \"text-success\"}>\n                        {this.questions[questionIndex].answers[this.state.selectedAnswers[questionIndex]].hint}\n                      </div>\n                      </Col></Row>\n                      : null\n                  }\n\n                </Col>\n              </Row>\n            </Form.Group>\n          ))}\n        </Container>\n        <ServerMoreValue value={this.state.value} />\n      </div>\n    );\n  }\n}\n\ninterface ServerMoreValueProps {\n  value: number\n}\n\ninterface ServerMoreValueState { }\n\nclass ServerMoreValue extends Component<ServerMoreValueProps, ServerMoreValueState> {\n  props: ServerMoreValueProps\n\n  constructor(props: ServerMoreValueProps) {\n    super(props)\n\n    this.props = props\n  }\n\n  render() {\n    return <Navbar id=\"footer\" fixed=\"bottom\" className=\"justify-content-center\">\n      <Col xs=\"3\" className=\"text-right\">\n        <Form.Label><strong>serverless</strong></Form.Label>\n      </Col>\n      <Col xs=\"6\">\n        <Form.Control type=\"range\" value={this.props.value} readOnly max=\"100\" min=\"-100\" />\n      </Col>\n      <Col xs=\"3\" className=\"text-left\">\n        <Form.Label><strong>servermore</strong></Form.Label>\n      </Col>\n    </Navbar>\n  }\n}\n\nexport default ServerMore;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}