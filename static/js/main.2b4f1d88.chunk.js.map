{"version":3,"sources":["models.tsx","questions.tsx","logo.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Question","questionText","answers","this","push","Answer","sort","first","second","value","Math","max","map","answer","abs","answerText","hint","questions","ServerMore","props","maxAnswerValue","enableDarkMode","userPrefersDarkScheme","window","matchMedia","storedDarkFlag","localStorage","getItem","console","log","matches","undefined","state","selectedAnswers","darkMode","setDarkMode","selectAnswer","bind","questionIndex","answerIndex","selectedAnswersCopy","setState","updateValue","newValue","forEach","document","documentElement","classList","toggle","setItem","String","Navbar","id","fixed","className","Col","xs","Image","src","logo","onClick","href","Container","Row","Jumbotron","OverlayTrigger","trigger","placement","overlay","Tooltip","question","Collapse","in","Card","Header","Form","Label","Body","ButtonGroup","ToggleButton","type","variant","checked","onChange","Footer","sm","Alert","Link","Component","ServerMoreValue","Control","readOnly","min","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2b4f1d88.chunk.js","sourcesContent":["export class Question {\n  questionText: string;\n  answers: Array<Answer>;\n\n  constructor(questionText: string, answers: Array<Answer>) {\n    this.questionText = questionText\n    answers.push(new Answer('Skip Question', 0, null))\n    this.answers = answers.sort((first, second) => second.value - first.value)\n  }\n\n  public get maxAnswerValue(): number {\n    return Math.max(...this.answers.map((answer) => Math.abs(answer.value)), 0)\n  }\n}\n\nexport class Answer {\n  answerText: string;\n  value: number;\n  hint: string | null;\n\n  constructor(answerText: string, value: number, hint: string | null) {\n    this.answerText = answerText\n    this.value = value\n    this.hint = hint\n  }\n}","import { Answer } from \"./models\";\nimport { Question } from \"./models\";\n\nexport const questions = [\n    new Question(\n        \"How quickly does your application start up?\",\n        [\n            new Answer(\n                \"Slow\",\n                10,\n                \"Slow starting applications aren't a great fit for serverless. Launching will happen frequently costing you extra time and money.\"\n            ),\n            new Answer(\n                \"Fast\",\n                -10,\n                \"Fast starting applications result in quick cold starts. üëç\"\n            )\n        ]\n    ),\n    new Question(\n        \"Do you plan to execute long running processes?\",\n        [\n            new Answer(\n                \"Yes\",\n                20,\n                \"Serverless computing resources are more expensive compared to traditional servers. Be aware of that when planning to run a lot of long term tasks.\"\n            ),\n            new Answer(\n                \"No\",\n                -20,\n                \"Serverless is great for executing short-term tasks.\"\n            )\n        ]\n    ),\n    new Question(\n        \"How predictable is your workload?\",\n        [\n            new Answer(\n                \"I have a good understand of which load I can expect.\",\n                10,\n                \"If you can plan your required compute capacity beforehand, running on traditional servers with autoscaling will be cheaper.\"\n            ),\n            new Answer(\n                \"I'm regularly encountering unpredictable traffic spikes.\",\n                -30,\n                \"Unpredictable load is where serverless really shines.\"\n            )\n        ]\n    ),\n    new Question(\n        \"Do you have the option to take care of server maintenance yourself?\",\n        [\n            new Answer(\n                \"No\",\n                -30,\n                \"Going serverless requires you to do no maintenance of servers whatsoever.\"\n            ),\n            new Answer(\n                \"Yes\",\n                10,\n                \"If you have the resources, managing your on-premise or cloud servers will give you more freedom in adjusting the environment to your needs.\"\n            )\n        ]\n    ),\n    new Question(\n        \"Is your runtime/programming language being supported by your serverless provider?\",\n        [\n            new Answer(\n                \"No\",\n                30,\n                \"In this case you may need to refactor your application.\"\n            ),\n            new Answer(\n                \"Yes\",\n                -5,\n                \"In this case you should be able to run serverless without needing to make too many changes to your application.\"\n            )\n        ]\n    ),\n    new Question(\n        \"How important is independence from your platform provider to you?\",\n        [\n            new Answer(\n                \"Very Important\",\n                20,\n                \"Take into consideration that switching from one serverless provider to another may come with a significant amount of migration work required.\"\n            ),\n            new Answer(\n                \"Kind of Important\",\n                10,\n                \"Take into consideration that switching from one serverless provider to another may come with a significant amount of migration work required.\"\n            ),\n            new Answer(\n                \"Not That Important\",\n                -5,\n                \"Good, just keep in mind that serverless often requires adjusting your application to the providers standards.\"\n            ),\n            new Answer(\n                \"Not Important at all\",\n                -10,\n                \"Good, just keep in mind that serverless often requires adjusting your application to the providers standards.\"\n            )\n        ]\n    ),\n    new Question(\n        \"Does your application require GPU compute resources?\",\n        [\n            new Answer(\n                \"Yes\",\n                50,\n                \"Currently there are pretty much no serverless providers with GPU support.\"\n            ),\n            new Answer(\n                \"No\",\n                -5,\n                \"In this case you'll be fine going with serverless.\"\n            )\n        ]\n    ),\n    new Question(\n        \"Is your code stateless?\",\n        [\n            new Answer(\n                \"Yes\",\n                -20,\n                \"This way you can benefit from Serverless' autoscaling out of the box.\"\n            ),\n            new Answer(\n                \"No\",\n                30,\n                \"That's something that is required to take advantage of serverless computing. Make sure to extracts all kinds of state into an external component like a database or cache.\"\n            )\n        ]\n    ),\n    new Question(\n        \"Is your code reading its configuration from environment variables?\",\n        [\n            new Answer(\n                \"Yes\",\n                -10,\n                \"Passing configuration parameters through environment variables is the preferred way by most Serverless providers.\"\n            ),\n            new Answer(\n                \"It does not require any configuration.\",\n                0,\n                null\n            ),\n            new Answer(\n                \"No\",\n                10,\n                \"You may need to adjust your code in this case. \"\n            )\n        ]\n    ),\n    new Question(\n        \"Does your application code exceed the maximum file size of your Serverless provider?\",\n        [\n            new Answer(\n                \"Yes\",\n                20,\n                \"This limit is probably not adjustable which means you need to decrease the size of your application.\"\n            ),\n            new Answer(\n                \"No\",\n                -5,\n                \"This way you won't run into problems when deploying your application code to your Serverless provider.\"\n            )\n        ]\n    )\n]","export default __webpack_public_path__ + \"static/media/logo.8b626ecb.svg\";","import React, { Component } from 'react';\nimport { ButtonGroup, Col, Container, Form, Navbar, Row, ToggleButton, Image, Jumbotron, Alert, Collapse, OverlayTrigger, Tooltip, Card } from 'react-bootstrap'\nimport { HeartFill, Moon, Sun, Hammer } from 'react-bootstrap-icons';\nimport './scrollbar.css';\nimport './slider.css';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Question } from './models';\nimport { questions } from './questions';\nimport logo from './logo.svg';\n\ninterface Props { }\ninterface State {\n  value: number,\n  selectedAnswers: Array<number>,\n  darkMode: boolean\n}\n\nexport class ServerMore extends Component<Props, State> {\n  questions: Array<Question>\n\n  constructor(props: Props) {\n    super(props)\n\n    this.questions = questions.sort((first, second) => second.maxAnswerValue - first.maxAnswerValue)\n\n    const userPrefersDarkScheme = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    const storedDarkFlag = localStorage.getItem(\"dark-mode\");\n\n    console.log(`User prefer dark color scheme: ${userPrefersDarkScheme.matches}`)\n    console.log(`stored dark mode flag: ${storedDarkFlag}`)\n    let enableDarkMode: boolean\n\n    if (userPrefersDarkScheme.matches && storedDarkFlag === undefined) {\n      enableDarkMode = true\n    } else if (storedDarkFlag === \"true\") {\n      enableDarkMode = true\n    } else {\n      enableDarkMode = false\n    }\n\n    this.state = {\n      value: 0,\n      selectedAnswers: [],\n      darkMode: enableDarkMode\n    }\n\n    this.setDarkMode(enableDarkMode)\n\n    this.selectAnswer = this.selectAnswer.bind(this)\n    this.setDarkMode = this.setDarkMode.bind(this)\n  }\n\n  selectAnswer(questionIndex: number, answerIndex: number) {\n    let selectedAnswersCopy = [...this.state.selectedAnswers];\n    selectedAnswersCopy[questionIndex] = answerIndex\n    this.setState({ selectedAnswers: selectedAnswersCopy }, () => {\n      this.updateValue()\n    })\n  }\n\n  updateValue() {\n    let newValue = 0\n\n    this.state.selectedAnswers.forEach((answerIndex, questionIndex) => {\n      if (answerIndex !== undefined) {\n        newValue += questions[questionIndex].answers[answerIndex].value\n      }\n    })\n\n    this.setState({ value: newValue })\n  }\n\n  setDarkMode(value: boolean) {\n    document.documentElement.classList.toggle(\"dark-mode\", value);\n\n    this.setState({\n      darkMode: value\n    }, () => {\n      localStorage.setItem(\"dark-mode\", String(this.state.darkMode));\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar id=\"header\" fixed=\"top\" className=\"justify-content-between\">\n          <Col xs=\"5\" className=\"text-left\">\n            <Image className=\"App-logo img-responsive\" src={logo}></Image> <strong>ServerMore</strong>\n          </Col>\n          <Col xs=\"1\" onClick={() => this.setDarkMode(!this.state.darkMode)}>\n            <h5>\n              {\n                this.state.darkMode\n                  ? <Sun className=\"text-warning\"></Sun>\n                  : <Moon className=\"text-warning\"></Moon>\n              }\n            </h5>\n          </Col>\n          <Col xs=\"5\" className=\"text-right\">\n            <Hammer className=\"text-secondary\"></Hammer> with <HeartFill className=\"text-danger\"></HeartFill> by <a href=\"https://brennerm.github.io/about.html\">brennerm</a>\n          </Col>\n        </Navbar>\n        <div className=\"content\">\n          <Container>\n            <Row>\n              <Col>\n                <Jumbotron>\n                  <h1 className=\"display-5\">\n                    Go <OverlayTrigger trigger=\"click\" key=\"top\" placement=\"top\"\n                      overlay={\n                        <Tooltip id={`tooltip-top`}>\n                          Don't know what's serverless? <a href=\"https://en.wikipedia.org/wiki/Serverless_computing\">Read about it!</a>\n                        </Tooltip>\n                      }>\n                      <span className=\"tooltip-text\">serverless</span>\n                    </OverlayTrigger> or run on regular servers?\n                  </h1>\n                  <p>\n                    That's what ServerMore is going to help you with.\n                    Answer as many questions as you want and the slider at the bottom will give you an indication based on your responses.\n                  </p>\n                </Jumbotron>\n              </Col>\n            </Row>\n            {this.questions.map((question, questionIndex) => (\n              <Collapse key={questionIndex} in={(questionIndex === 0 || this.state.selectedAnswers[questionIndex - 1] !== undefined)}>\n                <Card className=\"question\">\n                  <Card.Header>\n                    <Form.Label>{question.questionText}</Form.Label>\n                  </Card.Header>\n                  <Card.Body>\n                    <ButtonGroup toggle className=\"flex-wrap\">\n                      {question.answers.map((answer, answerIndex) => (\n                        <ToggleButton\n                          type=\"radio\"\n                          variant={answer.value === 0 ? \"secondary\" : \"primary\"}\n                          key={`${questionIndex}-${answerIndex}`}\n                          value={answerIndex}\n                          checked={this.state.selectedAnswers[questionIndex] === answerIndex}\n                          onChange={() => this.selectAnswer(questionIndex, answerIndex)}>\n                          {answer.answerText}\n                        </ToggleButton>\n\n                      ))}\n                    </ButtonGroup>\n                  </Card.Body>\n                  <div className={this.state.selectedAnswers[questionIndex] === undefined || this.questions[questionIndex].answers[this.state.selectedAnswers[questionIndex]].hint === null ? \"invisible\" : \"visible\"}>\n                    <Card.Footer>\n                      {\n                        this.state.selectedAnswers[questionIndex] !== undefined\n                          ? <div className={this.questions[questionIndex].answers[this.state.selectedAnswers[questionIndex]].value > 0 ? \"text-danger\" : \"text-success\"}>\n                            {this.questions[questionIndex].answers[this.state.selectedAnswers[questionIndex]].hint}\n                          </div>\n                          : null\n                      }\n                    </Card.Footer>\n                  </div>\n                </Card>\n              </Collapse>\n            ))}\n            <Row>\n              <Col></Col>\n              <Col sm=\"auto\">\n                <Alert variant=\"info\">\n                  Missing a question or don't agree with an existing one?\n                  <br></br>\n                  <Alert.Link href=\"https://github.com/brennerm/servermore/issues\">\n                    Submit an issue\n                </Alert.Link> or <Alert.Link href=\"https://github.com/brennerm/servermore/pulls\">\n                    propose the change yourself!\n                </Alert.Link>\n                </Alert>\n              </Col>\n              <Col></Col>\n            </Row>\n          </Container>\n        </div>\n        <ServerMoreValue value={this.state.value} />\n      </div>\n    );\n  }\n}\n\ninterface ServerMoreValueProps {\n  value: number\n}\n\ninterface ServerMoreValueState { }\n\nclass ServerMoreValue extends Component<ServerMoreValueProps, ServerMoreValueState> {\n  props: ServerMoreValueProps\n\n  constructor(props: ServerMoreValueProps) {\n    super(props)\n\n    this.props = props\n  }\n\n  render() {\n    return <Navbar id=\"footer\" fixed=\"bottom\" className=\"justify-content-center\">\n      <Col xs=\"3\" className=\"text-right\">\n        <Form.Label><strong>serverless</strong></Form.Label>\n      </Col>\n      <Col xs=\"6\">\n        <Form.Control type=\"range\" value={this.props.value} readOnly max=\"100\" min=\"-100\" />\n      </Col>\n      <Col xs=\"3\" className=\"text-left\">\n        <Form.Label><strong>servermore</strong></Form.Label>\n      </Col>\n    </Navbar>\n  }\n}\n\nexport default ServerMore;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}